#!/usr/bin/env ruby
#
# Usage:
#   togoid-config-summary config/*/*.yaml | togoid-config-summary-dot > togoid.dot
#   togoid-config-summary config/*/*.yaml | togoid-config-summary-dot --id > togoid.dot
#   dot -Kdot -Ppng togoid.dot -otogoid.png
#

# Option to include identifiers for nodes/edges
if ARGV[0] == "--id"
  opt_id = true
  ARGV.shift
end

nodes = {}
edges = []


ARGF.gets # skip header

ARGF.each do |line|
  ary = line.split(/\t/)
  s_id, t_id = ary[0].split('-')
  s_category = ary[2]
  s_label = ary[3]
  t_category = ary[6]
  t_label = ary[7]
  f_ns = ary[9]
  f_label = ary[10]
  f_pred = ary[12]
  r_ns = ary[13]
  r_label = ary[14]
  r_pred = ary[16]

  if opt_id
    s_name = "#{s_label}\n'#{s_id}'"
    t_name = "#{t_label}\n'#{t_id}'"
    f_name = "#{f_label}\n'#{f_ns}:#{f_pred}'"
    r_name = "#{r_label}\n'#{r_ns}:#{r_pred}'"
  else
    s_name = s_label
    t_name = t_label
    f_name = f_label
    r_name = r_label
  end

  nodes[s_name] = s_category
  nodes[t_name] = t_category
  edges << [ s_name, t_name, f_name ]
  if r_pred and ! r_pred.empty?
    edges << [ t_name, s_name, r_name ]
  end
end

colors = {
  "Compound"	=> "#E60012",
  "Disease"	=> "#EB6100",
  "Domain"	=> "#F39800",
  "Drug"	=> "#FCC800",
  "FIXME"	=> "#FFF100",
  "Function"	=> "#CFDB00",
  "Gene"	=> "#8FC31F",
  "Genome"	=> "#22AC38",
  "Interaction"	=> "#009944",
  "Literature"	=> "#009B6B",
  "Metabolite"	=> "#009E96",
  "Ortholog"	=> "#00A0C1",
  "Pathway"	=> "#00A0E9",
  "Phenotype"	=> "#0086D1",
  "Probe"	=> "#0068B7",
  "Protein"	=> "#00479D",
  "Sample"	=> "#1D2088",
  "Structure"	=> "#601986",
  "Taxonomy"	=> "#920783",
  "Terminology"	=> "#BE0081",
  "Variant"	=> "#E4007F",
  "microRNA"	=> "#E5006A",
}
#		   "#E5004F"
#		   "#E60033"

puts 'digraph togoid {
  node [
    style = "filled",
    fontname = "Migu 1M",
    color = "white"
  ];
  edge [
    fontname = "Migu 1M"
  ];
'
puts

#puts "  #{nodes.keys.map{|x| "\"#{x}\"join(', ')} ;"
nodes.each do |node, category|
  puts %Q{  "#{node}" [fillcolor = "#{colors[category]}"] ;}
end

puts

edges.each do |ary|
  puts %Q{  "#{ary[0]}" -> "#{ary[1]}" [label = "#{ary[2]}"] ;}
end

puts '}'

$stderr.puts "Run: dot -Kdot -Tpng togoid.dot -otogoid.png"

